invisible = 'quali' # menghilangkan label variabel categorical
)
plot.PCA(x = loan_pca, # objek dari fungsi PCA() dari library FactoMineR
choix = 'ind', # jenis visualisasi yang akan ditampilkan, ind -> individual factor map
select = "contrib 10", # untuk identifikasi 10 outlier terluar
habillage = 'quanti', # untuk mewarnai titik observasi berdasarkan variable categorical (ditulis index/nama kolom)
invisible = 'quali' # menghilangkan label variabel categorical
)
plot.PCA(x = loan_pca, # objek dari fungsi PCA() dari library FactoMineR
choix = 'ind', # jenis visualisasi yang akan ditampilkan, ind -> individual factor map
select = "contrib 10", # untuk identifikasi 10 outlier terluar
habillage = 'quantivar', # untuk mewarnai titik observasi berdasarkan variable categorical (ditulis index/nama kolom)
invisible = 'qualivar' # menghilangkan label variabel categorical
)
plot.PCA(x = loan_pca, # objek dari fungsi PCA() dari library FactoMineR
choix = 'ind', # jenis visualisasi yang akan ditampilkan, ind -> individual factor map
select = "contrib 10", # untuk identifikasi 10 outlier terluar
habillage = quanti, # untuk mewarnai titik observasi berdasarkan variable categorical (ditulis index/nama kolom)
invisible = quali # menghilangkan label variabel categorical
)
plot.PCA(x = loan_pca, # objek dari fungsi PCA() dari library FactoMineR
choix = 'ind', # jenis visualisasi yang akan ditampilkan, ind -> individual factor map
select = "contrib 10", # untuk identifikasi 10 outlier terluar
habillage = quali, # untuk mewarnai titik observasi berdasarkan variable categorical (ditulis index/nama kolom)
invisible = quali # menghilangkan label variabel categorical
)
plot.PCA(x = loan_pca, # objek dari fungsi PCA() dari library FactoMineR
choix = 'ind', # jenis visualisasi yang akan ditampilkan, ind -> individual factor map
select = "contrib 10", # untuk identifikasi 10 outlier terluar
habillage = 'grade', # untuk mewarnai titik observasi berdasarkan variable categorical (ditulis index/nama kolom)
invisible = 'quali' # menghilangkan label variabel categorical
)
loan_pca
loan_clean
plot.PCA(x = loan_pca, # objek dari fungsi PCA()
choix = "var")
# dimdisc: dimension description
loan_dim <- dimdesc(loan_pca, # objek dari fungsi PCA()
axes = 10
)
# dimdisc: dimension description
loan_dim <- dimdesc(loan_pca, # objek dari fungsi PCA()
axes = 10
)
# variable yang berkontribusi untuk PC1 dengan menggunakan loan_dim$Dim.1$quanti
as.data.frame(loan_dim$Dim.1$quanti)
# dimdisc: dimension description
loan_dim <- dimdesc(loan_pca, # objek dari fungsi PCA()
axes = 10
)
# dimdisc: dimension description
loan_dim <- dimdesc(loan_pca, # objek dari fungsi PCA()
axes = 10
)
# melakukan PCA dengan FactoMineR
loan_pca <- PCA(X = loan_clean, # data awal
scale.unit = T, # scaling
quali.sup = qualivar, # index kolom qualitative
graph = F,
ncp = 7) # 7 kolom numerik pada loan_clean
# dimdisc: dimension description
loan_dim <- dimdesc(loan_pca, # objek dari fungsi PCA()
axes = 10
)
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
knitr::include_graphics("additional_assets/versus.png")
knitr::include_graphics("assets/UL.png")
# coba bandingkan variansi kedua data ini:
a <- c(1,2,3,4,5,6,7,2,9,10)
b <- c(4,5,5,6,6,4,6,5,4,4)
var(a)
var(b)
x <- a*100
var(x)
knitr::include_graphics("assets/lenna.png")
knitr::include_graphics("additional_assets/pca.png")
knitr::include_graphics("additional_assets/knowledge_check.png")
knitr::include_graphics("additional_assets/ul12.png")
# perkalian matrix di R
matrix(c(0,1,-1,0), nrow=2) %*% as.vector(c(2,3))
# perkalian matrix di R
matrix(diag(1,2), nrow=2) %*% as.vector(c(2,3))
# membuat data dummy
RNGkind(sample.kind = "Rounding")
set.seed(100)
x <- runif(200) # buat data random dengan distribusi normal
data <- data.frame(x=x, y=-x+runif(100, 1.05, 1.25)) # buat data frame
data <- scale(data) # agar skala antar variable sama
head(data)
plot(data)
# matrix covariance
A <- cov(data)
A
# menghitung eigen
eigen(A)
# plotting eigen vector as new coordinate
slope1 <- eigen(A)$vectors[1,1]/eigen(A)$vectors[2,1]
slope2 <- eigen(A)$vectors[1,2]/eigen(A)$vectors[2,2]
plot(data, pch=19, cex=0.25, xlim=c(-1.5,1.5), ylim=c(-1.5,1.5))
lines(data[,1], data[,1] * slope1, col="blue") # PC1
lines(data[,1], data[,1] * slope2, col="green") # PC2
library(dplyr)
property <- read.csv("data_input/nyc.csv")
glimpse(property)
library(lubridate)
# melakukan seleksi kolom dan mengubah tipe data
property_clean <- property %>%
select(-c(X, EASE.MENT, APARTMENT.NUMBER)) %>% # buang kolom yang tidak perlu
mutate_at(vars(BOROUGH, BLOCK, LOT, ZIP.CODE, TAX.CLASS.AT.TIME.OF.SALE), as.factor) %>% # diubah menjadi factor
mutate_at(vars(LAND.SQUARE.FEET, GROSS.SQUARE.FEET, SALE.PRICE), as.integer) %>% # diubah menjadi int
mutate_if(is.character, as.factor) %>% # chr -> factor
mutate_at(vars(ADDRESS), as.character) %>% # kembalikan jadi chr
mutate(SALE.DATE = ymd_hms(SALE.DATE))
head(property_clean)
glimpse(property_clean)
# cek missing value
anyNA(property_clean)
colSums(is.na(property_clean))
library(tidyverse)
# membuang baris yang mengandung NA
property_clean <- property_clean %>%
drop_na()
colSums(is.na(property_clean))
# data untuk PCA
ppt <- property_clean %>%
select_if(is.numeric) # hanya mengambil kolom bertipe data numerik
glimpse(ppt)
# cek summary data
summary(ppt)
cov(ppt)
diag(cov(ppt))
# melihat variance yang dirangkum tiap PC
# fungsi prcomp() akan dijelaskan saat masuk pada proses PCA
plot(prcomp(ppt))
# scaling menggunakan fungsi scale()
ppt_z <- scale(ppt)
summary(ppt_z)
# melihat variance yang dirangkum tiap PC
plot(prcomp(ppt_z))
# buat PCA dengan prcomp()
prcomp(ppt_z)
# menggunakan data yang belum discaling pada fungsi prcomp(), lalu tambahkan parameter scale = T
pca <- prcomp(ppt, scale = T)
pca
pca$sdev
# Varians
pca$sdev^2
data.frame(pca$rotation) # eigen vectors
# Data Awal
as.data.frame(ppt_z)
# Data Baru (PC)
as.data.frame(pca$x)
summary(pca)
# subsetting: baris, kolom
# mengambil 4 kolom pertama
as.data.frame(pca$x)
pc_keep <- as.data.frame(pca$x[,1:4])
pc_keep
library(GGally)
# korelasi sebelum PCA
ggcorr(ppt, label = T, hjust = 1)
# korelasi setelah PCA
ggcorr(pc_keep, label = T)
ppt_100 <- ppt[1:100,]
# melakukan PCA
ppt_100_pca <- prcomp(ppt_100, scale = T)
# membuat biplot
biplot(x = ppt_100_pca,
cex = 1.2, # mengatur font size pada biplot
scale = F) # agar nilai yang ditampilkan sesuai dengan nilai pada $rotation yang sebenarnya
as.data.frame(ppt_100_pca$x)
biplot(x= ppt_100_pca, cex = 1.2, scale = F)
# cek nilai $x
ppt_100_pca$x
# cek nilai $rotation
ppt_100_pca$rotation
# outlier:
ppt_100[c(51,96,32),]
# non-outlier:
ppt_100[-c(51,96,32),]
biplot(ppt_100_pca, cex = 0.6, scale = F)
#install.packages("factoextra")
library(factoextra)
fviz_contrib(X = ppt_100_pca, # model PCA
axes = 3, # PC yang ingin dilihat (2 = PC2)
choice = "var") # "var" = merujuk kepada yang ingin ditampilkan adalah variabel
biplot(ppt_100_pca, scale = F, cex = 0.9, choices = c(1,3))
# cek korelasi antar variabel dari data awal
cor(ppt_100$GROSS.SQUARE.FEET,ppt_100$LAND.SQUARE.FEET)
cor(ppt_100$YEAR.BUILT, ppt_100$TOTAL.UNITS)
# get function & data
source("R/biplot.R")
data("USArrests")
head(USArrests)
# PCA & Visualization
pca_crime <- prcomp(USArrests, scale=T)
fancy_biplot(pca_crime)
loan <- read.csv("data_input/loan2017Q4.csv",
stringsAsFactors = T)
glimpse(loan)
loan_clean <- loan %>%
select(-c(verification_status, grdCtoA))
glimpse(loan_clean)
str(loan_clean)
# indeks kolom numerik (quantitative)
quantivar <- c(3:6,8:10,12:14)
# indeks kolom kategorik (qualitative)
qualivar <- c(1,2,7,11)
# bagian ini opsional
# nama kolom numerik (quantitative)
quanti <- loan_clean %>%
select_if(is.numeric) %>%
colnames()
# indeks kolom numerik
quantivar <- which(colnames(loan_clean) %in% quanti)
quantivar
# nama kolom kategorik (qualitative)
quali <- loan_clean %>%
select_if(is.factor) %>%
colnames()
# indeks kolom kategorik
qualivar <- which(colnames(loan_clean) %in% quali)
qualivar
# install.packages("FactorMineR")
library(FactoMineR)
# melakukan PCA dengan FactoMineR
loan_pca <- PCA(X = loan_clean, # data awal
scale.unit = T, # scaling
quali.sup = qualivar, # index kolom qualitative
graph = F,
ncp = 7) # 7 kolom numerik pada loan_clean
loan_pca
as.data.frame(loan_pca$eig)
summary(ppt_100_pca) # prcomp()
as.data.frame(ppt_100_pca$x)
# cek nilai di tiap PC, ekuivalen dengan pca$x dari hasil `prcomp()`
head(loan_pca$ind$coord)
plot.PCA(x = loan_pca, # objek dari fungsi PCA() dari library FactoMineR
choix = 'ind', # jenis visualisasi yang akan ditampilkan, ind -> individual factor map
select = "contrib 10", # untuk identifikasi 10 outlier terluar
habillage = 'grade', # untuk mewarnai titik observasi berdasarkan variable categorical (ditulis index/nama kolom)
invisible = 'quali' # menghilangkan label variabel categorical
)
plot.PCA(x = loan_pca, # objek dari fungsi PCA()
choix = "var")
# dimdisc: dimension description
loan_dim <- dimdesc(loan_pca, # objek dari fungsi PCA()
axes = 10
)
# dimdisc: dimension description
loan_dim <- dimdesc(loan_pca, # objek dari fungsi PCA()
axes = c(1:10)
)
# variable yang berkontribusi untuk PC1 dengan menggunakan loan_dim$Dim.1$quanti
as.data.frame(loan_dim$Dim.1$quanti)
qualivar
# bagian ini opsional
# nama kolom numerik (quantitative)
quanti <- loan_clean %>%
select_if(is.numeric) %>%
colnames()
# indeks kolom numerik
quantivar <- which(colnames(loan_clean) %in% quanti)
quantivar
# nama kolom kategorik (qualitative)
quali <- loan_clean %>%
select_if(is.factor) %>%
colnames()
# indeks kolom kategorik
qualivar <- which(colnames(loan_clean) %in% quali)
qualivar
# melakukan PCA dengan FactoMineR
loan_pca <- PCA(X = loan_clean, # data awal
scale.unit = T, # scaling
quali.sup = qualivar, # index kolom qualitative
graph = F,
ncp = 7) # 7 kolom numerik pada loan_clean
# dimdisc: dimension description
loan_dim <- dimdesc(loan_pca, # objek dari fungsi PCA()
axes = c(1:10)
)
loan_dim <- dimdesc(loan_pca, # objek dari fungsi PCA()
axes = c(1:10)
)
# dimdisc: dimension description
loan_dim <- dimdesc(loan_pca, axes = c(1:10))
# variable yang berkontribusi untuk PC1 dengan menggunakan loan_dim$Dim.1$quanti
as.data.frame(loan_dim$Dim.1$quanti)
plot.PCA(x = loan_pca, # objek dari fungsi PCA()
choix = "var")
# dimdisc: dimension description
loan_dim <- dimdesc(loan_pca, axes = c(1:10))
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
# dimdisc: dimension description
loan_dim <- dimdesc(loan_pca, axes = c(1:10))
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
knitr::include_graphics("additional_assets/versus.png")
knitr::include_graphics("assets/UL.png")
# coba bandingkan variansi kedua data ini:
a <- c(1,2,3,4,5,6,7,2,9,10)
b <- c(4,5,5,6,6,4,6,5,4,4)
var(a)
var(b)
x <- a*100
var(x)
knitr::include_graphics("assets/lenna.png")
knitr::include_graphics("additional_assets/pca.png")
knitr::include_graphics("additional_assets/knowledge_check.png")
knitr::include_graphics("additional_assets/ul12.png")
# perkalian matrix di R
matrix(c(0,1,-1,0), nrow=2) %*% as.vector(c(2,3))
# perkalian matrix di R
matrix(diag(1,2), nrow=2) %*% as.vector(c(2,3))
# membuat data dummy
RNGkind(sample.kind = "Rounding")
set.seed(100)
x <- runif(200) # buat data random dengan distribusi normal
data <- data.frame(x=x, y=-x+runif(100, 1.05, 1.25)) # buat data frame
data <- scale(data) # agar skala antar variable sama
head(data)
plot(data)
# matrix covariance
A <- cov(data)
A
# menghitung eigen
eigen(A)
# plotting eigen vector as new coordinate
slope1 <- eigen(A)$vectors[1,1]/eigen(A)$vectors[2,1]
slope2 <- eigen(A)$vectors[1,2]/eigen(A)$vectors[2,2]
plot(data, pch=19, cex=0.25, xlim=c(-1.5,1.5), ylim=c(-1.5,1.5))
lines(data[,1], data[,1] * slope1, col="blue") # PC1
lines(data[,1], data[,1] * slope2, col="green") # PC2
library(dplyr)
property <- read.csv("data_input/nyc.csv")
glimpse(property)
library(lubridate)
# melakukan seleksi kolom dan mengubah tipe data
property_clean <- property %>%
select(-c(X, EASE.MENT, APARTMENT.NUMBER)) %>% # buang kolom yang tidak perlu
mutate_at(vars(BOROUGH, BLOCK, LOT, ZIP.CODE, TAX.CLASS.AT.TIME.OF.SALE), as.factor) %>% # diubah menjadi factor
mutate_at(vars(LAND.SQUARE.FEET, GROSS.SQUARE.FEET, SALE.PRICE), as.integer) %>% # diubah menjadi int
mutate_if(is.character, as.factor) %>% # chr -> factor
mutate_at(vars(ADDRESS), as.character) %>% # kembalikan jadi chr
mutate(SALE.DATE = ymd_hms(SALE.DATE))
head(property_clean)
glimpse(property_clean)
# cek missing value
anyNA(property_clean)
colSums(is.na(property_clean))
library(tidyverse)
# membuang baris yang mengandung NA
property_clean <- property_clean %>%
drop_na()
colSums(is.na(property_clean))
# data untuk PCA
ppt <- property_clean %>%
select_if(is.numeric) # hanya mengambil kolom bertipe data numerik
glimpse(ppt)
# cek summary data
summary(ppt)
cov(ppt)
diag(cov(ppt))
# melihat variance yang dirangkum tiap PC
# fungsi prcomp() akan dijelaskan saat masuk pada proses PCA
plot(prcomp(ppt))
# scaling menggunakan fungsi scale()
ppt_z <- scale(ppt)
summary(ppt_z)
# melihat variance yang dirangkum tiap PC
plot(prcomp(ppt_z))
# buat PCA dengan prcomp()
prcomp(ppt_z)
# menggunakan data yang belum discaling pada fungsi prcomp(), lalu tambahkan parameter scale = T
pca <- prcomp(ppt, scale = T)
pca
pca$sdev
# Varians
pca$sdev^2
data.frame(pca$rotation) # eigen vectors
# Data Awal
as.data.frame(ppt_z)
# Data Baru (PC)
as.data.frame(pca$x)
summary(pca)
# subsetting: baris, kolom
# mengambil 4 kolom pertama
as.data.frame(pca$x)
pc_keep <- as.data.frame(pca$x[,1:4])
pc_keep
library(GGally)
# korelasi sebelum PCA
ggcorr(ppt, label = T, hjust = 1)
# korelasi setelah PCA
ggcorr(pc_keep, label = T)
ppt_100 <- head(ppt, 100)
# melakukan PCA
ppt_100_pca <- prcomp(ppt_100, scale = T)
# membuat biplot
biplot(x = ppt_100_pca,
cex = 1.2, # mengatur font size pada biplot
scale = F) # agar nilai yang ditampilkan sesuai dengan nilai pada $rotation yang sebenarnya
as.data.frame(ppt_100_pca$x[,c(1,2)])
biplot(x= ppt_100_pca, cex = 1.2, scale = F)
# cek nilai $x
# ppt_100_pca$_____
# cek nilai $rotation
# ppt_100_pca$_____
# outlier: 32, 96
# non-outlier: 20, 21
ppt_100[c(20, 21, 32, 96),]
biplot(ppt_100_pca, cex = 1.2, scale = F)
#install.packages("factoextra")
library(factoextra)
fviz_contrib(X = ppt_100_pca, # model PCA
axes = 2, # PC yang ingin dilihat (2 = PC2)
choice = "var") # "var" = merujuk kepada yang ingin ditampilkan adalah variabel
biplot(ppt_100_pca, scale = F, cex = 1.2, choices = c(1, 3))
# cek korelasi antar variabel dari data awal
cor(ppt_100$GROSS.SQUARE.FEET,ppt_100$LAND.SQUARE.FEET)
cor(ppt_100$YEAR.BUILT, ppt_100$COMMERCIAL.UNITS)
# get function & data
source("R/biplot.R")
data("USArrests")
head(USArrests)
# PCA & Visualization
pca_crime <- prcomp(USArrests, scale = T)
fancy_biplot(pca_crime)
loan <- read.csv("data_input/loan2017Q4.csv",
stringsAsFactors = T)
glimpse(loan)
loan_clean <- loan %>%
select(-c(verification_status, grdCtoA))
glimpse(loan_clean)
str(loan_clean)
# indeks kolom numerik (quantitative)
quantivar <- c(3:6,8:10, 12:14)
# indeks kolom kategorik (qualitative)
qualivar <- c(1,2,7,11)
# bagian ini opsional
# nama kolom numerik (quantitative)
quanti <- loan_clean %>%
select_if(is.numeric) %>%
colnames()
# indeks kolom numerik
quantivar <- which(colnames(loan_clean) %in% quanti)
quantivar
# nama kolom kategorik (qualitative)
quali <- loan_clean %>%
select_if(is.factor) %>%
colnames()
# indeks kolom kategorik
qualivar <- which(colnames(loan_clean) %in% quali)
qualivar
# install.packages("FactorMineR")
library(FactoMineR)
# melakukan PCA dengan FactoMineR
loan_pca <- PCA(X = loan_clean, # data awal
scale.unit = T, # scaling
quali.sup = qualivar, # index kolom qualitative
graph = F,
ncp = 10) #  kolom numerik pada loan_clean
loan_pca
loan_pca$eig
summary(ppt_100_pca) # prcomp()
as.data.frame(ppt_100_pca$x)
# cek nilai di tiap PC, ekuivalen dengan pca$x dari hasil `prcomp()`
head(loan_pca$ind$coord)
plot.PCA(x = loan_pca, # objek dari fungsi PCA() dari library FactoMineR
choix = "ind", # jenis visualisasi yang akan ditampilkan, ind -> individual factor map
select = "contrib 10", # untuk identifikasi 10 outlier terluar
habillage = "grade", # untuk mewarnai titik observasi berdasarkan variable categorical (ditulis index/nama kolom)
invisible = "quali" # menghilangkan label variabel categorical
)
quali
plot.PCA(x = loan_pca, # objek dari fungsi PCA()
choix = "var")
# dimdisc: dimension description
loan_dim <- dimdesc(loan_pca, # objek dari fungsi PCA()
axes = c(1:10)
)
# variable yang berkontribusi untuk PC1 dengan menggunakan loan_dim$Dim.1$quanti
as.data.frame(loan_dim$Dim.1$quanti) #Dim.1 adalah PC1
fviz_contrib(X = loan_pca,
choice = "var",
axes = 1)
