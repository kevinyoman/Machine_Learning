.funs = as.factor)
glimpse(flight)
flight.model <- glm(DepDel15~Month + DayofWeek, flight, family='binomial')
summary(flight.model)
table(flight$Month, flight$DepDel15)
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>")
options(scipen = 9999)
# library
library(dplyr)
# peluang
24/30
# peluang tidak lulus
1- 0.8
# tentukan kelas
peluang <- 4/30
ifelse(peluang > 0.5 , yes = "lulus", no = "tidak lulus")
# peluang = 0.8
# peluang tidak lulus = 0.2
# odds
0.2/0.8
# peluang
p <- 75/100
# odds
p/(1-p)
# odds: p/1-p
# min
0/(1-0)
# max
1/(1-1)
# log of odds - lulus kuis
log(4)
# log of odds - pesawat on time
log(3)
# min
log(0/(1-0))
# max
log(1/(1-1))
# log of odds -> odds
odds <- exp(1.386294)
odds
# odds -> peluang dengan `odds/(odds+1)`
odds/(odds+1)
library(gtools)
# peluang -> log of odds dengan `logit()`
logit(0.8)
# log of odds -> peluang dengan `inv.logit()`
inv.logit(1.386294)
# sigmoid function
curve(inv.logit(x), from = -10, to=10,
xlab = "Log of Odds",
ylab = "Peluang")
# read & inspect data
honors <- read.csv("data_input/sample.csv") %>%
select(-femalexmath)
glimpse(honors)
# cek missing value
anyNA(honors)
# data wrangling
honors <- honors %>%
mutate(female = as.factor(female),
hon = as.factor(hon))
honors.logit <- glm(formula = hon ~ 1, data = honors, family = "binomial")
summary(honors.logit)
# peluang
table(honors$hon)
# log of odds student honors
logit(49/200)
# log of odds -> odds
exp(-1.12546)
honors.logit2 <- glm(formula = hon ~ female  , data = honors , family = "binomial")
summary(honors.logit2)
# proportion
table(female = honors$female, honors = honors$hon)
# peluang
p_female <- 32/(32+77)
p_male <- 17/91
# odds
o_female <- p_female / (1-p_female)
o_male <- p_male / (1-p_male)
# log of odds
log(o_female/o_male)
# log dari odds female mendapakan honors dibagi dengan log dari odd male mendapakan honors
log(o_male)
# odds female dapat honors
exp(0.5927822)
honors.logit3 <- glm(formula = hon ~ math, data = honors, family = "binomial")
summary(honors.logit3)
# hint: substitusi formula model saja
# log of odds
hon52 <-  -9.79394 + 0.15634 * 52
hon53 <- -9.79394 + 0.15634 * 53
hon53-hon52
# log of odds -> odds
exp(hon53-hon52)
honors.logit4 <- glm(hon ~ female + math, data = honors , family= "binomial")
summary(honors.logit4)
# female
exp(0.96531 )
# math
exp(0.16422)
joe <- -10.80595 + 0.96531 * 0 + 0.16422 *60
joe
inv.logit(joe)
ifelse(inv.logit(joe) < 0.5 , "tidak honors", "honors" )
wulan <- -10.80595 + 0.96531 * 1 + 0.16422 *80
inv.logit(wulan)
inv.logit(-10.80595 + 0.96531 * 0 + 0.16422 *90)
summary(honors.logit)
# null deviance
honors.logit$null.deviance
# residual deviance
honors.logit$deviance # wo/ predictor
honors.logit2$deviance # w/ female
honors.logit3$deviance # w/ math
honors.logit4$deviance # w/ female + math
honors.logit5 <- glm(hon ~ . , data = honors, family = "binomial")
summary(honors.logit5)
# log of odds -> odds
data.frame(odds = exp(honors.logit5$coefficients))
table(honors$hon, honors$write)
plot(honors$hon, honors$write)
# revisi model
honors.logit6 <- glm(hon ~ female + read + math , data = honors, family = "binomial")
summary(honors.logit6)
honors.logit$aic # wo/ predictor
honors.logit2$aic # w/ female
honors.logit3$aic # w/ math
honors.logit4$aic # w/ female + math
honors.logit6$aic # w/ all predictor except write
honors.logit5$aic # w/ write
flight <- read.csv("data_input/flight_sm.csv") %>%
mutate(DepDel15 = as.factor(DepDel15))
glimpse(flight)
flight.model <- glm(DepDel15 ~ Month + DayofWeek , data = flight, family = "binomial")
summary(flight.model)
flight_clean <- flight %>%
mutate(Month = as.factor(Month),
DayofWeek = as.factor(DayofWeek))
glimpse(flight_clean)
flight.model_baru <- glm(DepDel15 ~ Month + DayofWeek , data = flight_clean, family = "binomial")
summary(flight.model_baru)
loans <- read.csv("data_input/loan2017Q4.csv", stringsAsFactors = T)
glimpse(loans)
library(dplyr)
loan_clean <- loans %>%
select(-c(verification_status, grade, annual_inc)) %>%
mutate(grdCtoA = as.factor(grdCtoA),
not_paid = as.factor(not_paid),
verified = as.factor(verified))
glimpse(loan_clean)
anyNA(loan_clean)
# explore with summary
summary(loan_clean)
# numeric predictor vs target variable
boxplot(loan_clean$dti , loan_clean$not_paid, ylim = c(0,10))
table(loan_clean$purpose, loan_clean$not_paid)
prop.table(table(loan_clean$not_paid))
table(loan_clean$grdCtoA, loan_clean$not_paid)
prop.table(table(loan_clean$not_paid))
# # intuisi set seed: mengunci random number kita
# set.seed(417) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
# # intuisi set seed: mengunci random number kita
# set.seed(417) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
# # intuisi set seed: mengunci random number kita
# set.seed(417) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
```{r}
# # intuisi set seed: mengunci random number kita
# set.seed(417) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
# # intuisi set seed: mengunci random number kita
# set.seed(417) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
# # intuisi set seed: mengunci random number kita
set.seed(417) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
# # intuisi set seed: mengunci random number kita
set.seed(417) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
# # intuisi set seed: mengunci random number kita
set.seed(417) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
# # intuisi set seed: mengunci random number kita
set.seed(417) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
# # intuisi set seed: mengunci random number kita
set.seed(417) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
# # intuisi set seed: mengunci random number kita
set.seed(417) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
# # intuisi set seed: mengunci random number kita
set.seed(416) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
# # intuisi set seed: mengunci random number kita
set.seed(415) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
# # intuisi set seed: mengunci random number kita
set.seed(415) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
# # intuisi set seed: mengunci random number kita
set.seed(415) # pakai set.seed -> random number dikunci, hasil sampling selalu sama
sample(c("Angela", "Anthony", "Rizky", "Kevin"), 2)
RNGkind(sample.kind = "Rounding") # tambahan khusus u/ R 3.6 ke atas
set.seed(417) # mengunci random number yang dipilih
RNGkind(sample.kind = "Rounding") # tambahan khusus u/ R 3.6 ke atas
set.seed(417) # mengunci random number yang dipilih
# index sampling
idx <- sample(x = nrow(loan_clean), size= nrow(loan_clean) * 0.8)
# splitting
loans.train <- loan_clean[index, ]
loans.train
RNGkind(sample.kind = "Rounding") # tambahan khusus u/ R 3.6 ke atas
set.seed(417) # mengunci random number yang dipilih
# index sampling
idx <- sample(x = nrow(loan_clean), size= nrow(loan_clean) * 0.8)
# splitting
loans.train <- loan_clean[idx, ]
loans.test <- loan_clean[-idx, ]
# re-check class imbalance
prop.table(table(loans.train$not_paid))
prop.table(table(loans.test$not_paid))
install.package("rsample")
install.packages("rsample")
library(rsample)
index_bal <- initial_split(data = loan_clean, prop =0.8, strata="not_paid")
index_bal <- initial_split(data = loan_clean, prop =0.8, strata=not_paid)
library(rsample)
set.seed(417)
index_bal <- initial_split(data = loan_clean, prop =0.8, strata='not_paid')
loans_train <- loan_clean[index_bal,]
index_bal <- initial_split(data = loan_clean, prop =0.8, strata='not_paid')
loans_train <- loan_clean[index_bal,]
loan_clean
library(rsample)
set.seed(417)
index_bal <- initial_split(data = loan_clean, prop =0.8, strata='not_paid')
loans_train <- training(index_bal)
loans_test <- testing(index_bal)
prop.table(table(loans_train$not_paid))
prop.table(table(loans_test$not_paid))
model.loans <- glm(not_paid~1, loans.train, family="binomial")
loans_bw <- step(loans.train,direction='backward')
loans_bw <- step(loans.train,direction='backward')
model.loans <- glm(not_paid~., loans.train, family="binomial")
loans_bw <- step(model.loans,direction='backward')
summary(loans_bw)
loans_both <- step(model.1,scope=list(upper=model.loans), direction='both')
model.1 <- glm(not_paid~1, loans.train, family="binomial")
loans_both <- step(model.1,scope=list(upper=model.loans), direction='both')
loans_bw
loans_both
loans_bw
loans_both
loans_bw
loans_both <- step(model.1,scope=list(upper=model.loans), direction='both')
loans_bw
loans_both
loans_bw
loans_bw$coefficients
loans_bw
loans_both
loans_bw
loans_both
loans_bw
loans.train
exp(loans_bw)
exp(loans_bw$coefficients)
summary(loans_bw)
model.1 <- glm(not_paid~installment + grdCtoA, loans.train, family="binomial")
model.coba <- glm(not_paid~installment + grdCtoA, loans.train, family="binomial")
loans_coba <- step(model.coba,direction='backward')
summary(loans_coba)
exp(loans_bw$coefficients)
loans.test <- loan_clean
prob_notpaid <-
predict(object = ... ,
newdata = loans.test[1:6,],
type = "response")
prob_notpaid <-
predict(object = model.loans ,
newdata = loans.test[1:6,],
type = "response")
loans.test$pred.Risk <- prob_notpaid
prob_notpaid <-
predict(object = model.loans ,
newdata = loans.test,
type = "response")
loans.test$pred.Risk <- prob_notpaid
loans.test <- loan_clean
loans.test$pred.Risk <- prob_notpaid
# ifelse(kondisi, benar, salah)
ifelse(loans.test$pred.Risk < 0.5, "Aman", "Ga boleh dikreditin")
# ifelse(kondisi, benar, salah)
loans.test$result <- ifelse(loans.test$pred.Risk < 0.5, "Aman", "Ga boleh dikreditin")
# ifelse(kondisi, benar, salah)
loans.test$result <- ifelse(loans.test$pred.Risk < 0.5, "Aman", "Ga boleh dikreditin")
# pastikan kelas target (aktual dan prediksi) bertipe factor
loans.test <- loans.test
# pastikan kelas target (aktual dan prediksi) bertipe factor
loans.test <- loans.test %>%
mutate(result= as.factor)
# ifelse(kondisi, benar, salah)
loans.test$pred.Label <- ifelse(loans.test$pred.Risk < 0.5, "Aman", "Ga boleh dipinjemin")
# pastikan kelas target (aktual dan prediksi) bertipe factor
loans.test <- loans.test %>%
mutate_at(.vars=pred.Label, .funs= as.factor)
# ifelse(kondisi, benar, salah)
loans.test$pred.Label <- ifelse(loans.test$pred.Risk < 0.5, "Aman", "Ga boleh dipinjemin")
# pastikan kelas target (aktual dan prediksi) bertipe factor
loans.test <- loans.test %>%
mutate_at(.vars=pred.Label, .funs= as.factor)
# pastikan kelas target (aktual dan prediksi) bertipe factor
loans.test <- loans.test %>%
mutate_at(.vars='pred.Label', .funs= as.factor)
# lihat hasil prediksi
loans.test %>%
select(not_paid, pred.Risk, pred.Label) %>%
head(6)
library(rsample)
set.seed(417)
index_bal <- initial_split(data = loan_clean, prop =0.8, strata='not_paid')
loans_train <- training(index_bal)
loans_test <- testing(index_bal)
prop.table(table(loans_train$not_paid))
prop.table(table(loans_test$not_paid))
RNGkind(sample.kind = "Rounding") # tambahan khusus u/ R 3.6 ke atas
set.seed(417) # mengunci random number yang dipilih
# index sampling
idx <- sample(x = nrow(loan_clean), size= nrow(loan_clean) * 0.8)
# splitting
loans.train <- loan_clean[idx, ]
loans.test <- loan_clean[-idx, ]
model.loans <- glm(not_paid~., loans.train, family="binomial")
model.coba <- glm(not_paid~installment + grdCtoA, loans.train, family="binomial")
loans_bw <- step(model.loans,direction='backward')
loans_coba <- step(model.coba,direction='backward')
prob_notpaid <-
predict(object = loans_bw ,
newdata = loans.test,
type = "response")
# ifelse(kondisi, benar, salah)
loans.test$pred.Label <- ifelse(loans.test$pred.Risk < 0.5, "Aman", "Ga boleh dipinjemin")
loans.test$pred.Risk <- prob_notpaid
# ifelse(kondisi, benar, salah)
loans.test$pred.Label <- ifelse(loans.test$pred.Risk < 0.5, "Aman", "Ga boleh dipinjemin")
# pastikan kelas target (aktual dan prediksi) bertipe factor
loans.test <- loans.test %>%
mutate_at(.vars=pred.Label, .funs= as.factor)
# lihat hasil prediksi
loans.test %>%
select(not_paid, pred.Risk, pred.Label) %>%
head(6)
# ifelse(kondisi, benar, salah)
loans.test$pred.Label <- ifelse(loans.test$pred.Risk > 0.5, 1, 0)
# pastikan kelas target (aktual dan prediksi) bertipe factor
loans.test <- loans.test %>%
mutate_at(.vars=pred.Label, .funs= as.factor)
# ifelse(kondisi, benar, salah)
loans.test$pred.Label <- ifelse(loans.test$pred.Risk > 0.5, 1, 0)
# pastikan kelas target (aktual dan prediksi) bertipe factor
loans.test <- loans.test %>%
mutate_at(.vars=pred.Label, .funs= as.factor)
# ifelse(kondisi, benar, salah)
loans.test$pred.Label <- ifelse(loans.test$pred.Risk > 0.5, 1, 0)
# pastikan kelas target (aktual dan prediksi) bertipe factor
loans.test <- loans.test %>%
mutate_at(.vars=pred.Label, .funs= as.factor)
# pastikan kelas target (aktual dan prediksi) bertipe factor
loans.test <- loans.test %>%
mutate_at(.vars='pred.Label', .funs= as.factor)
# lihat hasil prediksi
loans.test %>%
select(not_paid, pred.Risk, pred.Label) %>%
head(6)
library(caret)
confusionMatrix(data=loans.test$pred.Label, reference = loans.test$not_paid)
confusionMatrix(data=loans.test$pred.Label, reference = loans.test$not_paid, positive = "1")
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>")
options(scipen = 9999)
# library
library(dplyr)
# peluang
24/30
# peluang tidak lulus
1- 0.8
# tentukan kelas
peluang <- 4/30
ifelse(peluang > 0.5 , yes = "lulus", no = "tidak lulus")
# peluang = 0.8
# peluang tidak lulus = 0.2
# odds
0.2/0.8
# peluang
p <- 75/100
# odds
p/(1-p)
# odds: p/1-p
# min
0/(1-0)
# max
1/(1-1)
# log of odds - lulus kuis
log(4)
# log of odds - pesawat on time
log(3)
# min
log(0/(1-0))
# max
log(1/(1-1))
# log of odds -> odds
odds <- exp(1.386294)
odds
# odds -> peluang dengan `odds/(odds+1)`
odds/(odds+1)
library(gtools)
# peluang -> log of odds dengan `logit()`
logit(0.8)
# log of odds -> peluang dengan `inv.logit()`
inv.logit(1.386294)
# sigmoid function
curve(inv.logit(x), from = -10, to=10,
xlab = "Log of Odds",
ylab = "Peluang")
# read & inspect data
honors <- read.csv("data_input/sample.csv") %>%
select(-femalexmath)
glimpse(honors)
# cek missing value
anyNA(honors)
# data wrangling
honors <- honors %>%
mutate(female = as.factor(female),
hon = as.factor(hon))
honors.logit <- glm(formula = hon ~ 1, data = honors, family = "binomial")
summary(honors.logit)
# peluang
table(honors$hon)
# log of odds student honors
logit(49/200)
# log of odds -> odds
exp(-1.12546)
honors.logit2 <- glm(formula = hon ~ female  , data = honors , family = "binomial")
summary(honors.logit2)
# proportion
table(female = honors$female, honors = honors$hon)
# peluang
p_female <- 32/(32+77)
p_male <- 17/91
# odds
o_female <- p_female / (1-p_female)
o_male <- p_male / (1-p_male)
# log of odds
log(o_female/o_male)
# log dari odds female mendapakan honors dibagi dengan log dari odd male mendapakan honors
log(o_male)
# odds female dapat honors
exp(0.5927822)
honors.logit3 <- glm(formula = hon ~ math, data = honors, family = "binomial")
summary(honors.logit3)
# hint: substitusi formula model saja
# log of odds
hon52 <-  -9.79394 + 0.15634 * 52
hon53 <- -9.79394 + 0.15634 * 53
hon53-hon52
# log of odds -> odds
exp(hon53-hon52)
honors.logit4 <- glm(hon ~ female + math, data = honors , family= "binomial")
summary(honors.logit4)
# female
exp(0.96531 )
# math
exp(0.16422)
joe <- -10.80595 + 0.96531 * 0 + 0.16422 *60
joe
inv.logit(joe)
ifelse(inv.logit(joe) < 0.5 , "tidak honors", "honors" )
wulan <- -10.80595 + 0.96531 * 1 + 0.16422 *80
inv.logit(wulan)
inv.logit(-10.80595 + 0.96531 * 0 + 0.16422 *90)
summary(honors.logit)
# null deviance
honors.logit$null.deviance
# residual deviance
honors.logit$deviance # wo/ predictor
honors.logit2$deviance # w/ female
honors.logit3$deviance # w/ math
honors.logit4$deviance # w/ female + math
honors.logit5 <- glm(hon ~ . , data = honors, family = "binomial")
summary(honors.logit5)
data.frame(odds = exp(honors.logit5$coefficients))
table(honors$hon, honors$write)
table(honors$hon, honors$write)
plot(honors$hon, honors$write)
honors
plot(honors$hon, honors$write)
